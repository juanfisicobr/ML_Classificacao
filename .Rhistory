install.packages("bibliometrix")
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
install.packages("bibliometrix")
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
biblioshiny()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
biblioshiny()
library(bibliometrix)
biblioshiny()
biblioshiny()
library(bibliometrix)
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
biblioshiny()
install.packages("bibliometrix")
q()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
q()
library(bibliometrix)
biblioshiny()
q()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
install.packages("bibliometrix")
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
q()
library(bibliometrix)
biblioshiny()
library(bibliometrix)
biblioshiny()
q()
library(bibliometrix)
biblioshiny()
biblioshiny()
biblioshiny()
q()
library(bibliometrix)
biblioshiny()
q()
library(bibliometrix)
biblioshiny()
q()
library(bibliometrix)
biblioshiny()
q()
q()
library(bibliometrix)
biblioshiny()
q()
library(bibliometrix)
biblioshiny()
q()
library(bibliometrix)
biblioshiny()
q()
library(bibliometrix)
biblioshiny()
biblioshiny()
q()
library(bibliometrix)
biblioshiny()
q()
library(bibliometrix)
biblioshiny()
biblioshiny()
biblioshiny()
biblioshiny()
library(bibliometrix)
biblioshiny()
q()
install.packages("backports")
install.packages("bibliometrix")
install.packages("bibliometrix")
library(class)
library(bibliometrix)
biblioshiny()
lista.de.pacotes <- c("data.table","class")
novos.pacotes <- lista.de.pacotes[!(lista.de.pacotes %in% installed.packages()[,"Package"])]
if(length(novos.pacotes)) install.packages(novos.pacotes)
lapply(lista.de.pacotes, require, character.only = TRUE)
# Definicao da trilha de dados
# Definindo a trilha SE o script estiver dentro da pasta
my.path <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(my.path)
signs<-read.table("signs.txt",h=T,sep=",")
# Examine the structure of the signs dataset
str(signs)
# Count the number of signs of each type
table(signs$sign_type)
smp_size<-150
train_ind <- sample(seq_len(nrow(signs)), size = smp_size)
train_signs <- signs[train_ind, ]
test_signs <- signs[-train_ind, ]
# Use kNN to identify the test road signs
sign_types <- train_signs$sign_type
signs_pred <- knn(train = train_signs[,-c(1:3)], test = test_signs[,-c(1:3)], cl = sign_types)
# Create a confusion matrix of the predicted versus actual values
signs_actual <- test_signs$sign_type
table(signs_pred, signs_actual)
# Compute the accuracy
mean(signs_pred == signs_actual)
# Modify the above to set k = 7
k_7 <- knn(train = train_signs[,-c(1:3)], test = test_signs[,-c(1:3)], cl = sign_types, k=7)
mean(k_7==signs_actual)
table(k_7, signs_actual)
# Set k = 15 and compare to the above
k_15 <- knn(train = train_signs[,-c(1:3)], test = test_signs[,-c(1:3)], cl = sign_types, k=15)
mean(k_15==signs_actual)
table(k_15, signs_actual)
k_2 <- knn(train = train_signs[,-c(1:3)], test = test_signs[,-c(1:3)], cl = sign_types, k=2)
mean(k_1==signs_actual)
k_2 <- knn(train = train_signs[,-c(1:3)], test = test_signs[,-c(1:3)], cl = sign_types, k=2)
mean(k_2==signs_actual)
table(k_2, signs_actual
)
# Verify the votes proportion
# Use the prob parameter to get the proportion of votes for the winning class
sign_pred <- knn(train = train_signs[,-c(1:3)], test = test_signs[,-c(1:3)], cl = sign_types, k=15, prob=TRUE)
# Get the "prob" attribute from the predicted classes
sign_prob <- attr(sign_pred, "prob")
# Examine the first several predictions
head(sign_pred)
# Examine the proportion of votes for the winning class
head(sign_prob)
# Normalize tha data to be used in the kNN model
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
new_data_train<-normalize(train_signs[,-c(1:3)])
new_data_test<-normalize(test_signs[,-c(1:3)])
View(test_signs)
View(new_data_test)
View(new_data_train)
k_norm <- knn(train = new_data_train, test = new_data_test, cl = sign_types)
mean(k_norm==signs_actual)
k_norm_7 <- knn(train = new_data_train, test = new_data_test, cl = sign_types, k=7)
mean(k_norm_7==signs_actual)
k_norm_3 <- knn(train = new_data_train, test = new_data_test, cl = sign_types, k=3)
mean(k_norm_3==signs_actual)
table(k_norm_3, signs_actual)
View(new_data_test)
sign_pred
dados<-iris
smp_size<-nrow(dados)*0.75
train_ind <- sample(seq_len(nrow(dados)), size = smp_size)
train_ind <- sample(seq_len(nrow(dados)), size = smp_size)
train_ind
train <- dados[train_ind, ]
test <- dados[-train_ind, ]
test
# Use kNN to identify the test
especie <- train$Species
especie
head(especie)
pred <- knn(train = train[,-c(5)], test = test[,-c(5)], cl = especie)
# Create a confusion matrix of the predicted versus actual values
actual <- test$Species
table(signs_pred, actual)
table(pred, actual)
# Compute the accuracy
mean(pred == actual)
k_1 <- knn(train = train[,-c(5)], test = test[,-c(5)], cl = especie)
mean(k_1==actual)
table(k_1, actual
k_5 <- knn(train = train[,-c(5)], test = test[,-c(5)], cl = especie, k=5)
# Modify the above to set k = 5
k_5 <- knn(train = train[,-c(5)], test = test[,-c(5)], cl = especie, k=5)
mean(k_5==actual)
table(k_5, actual)
# Set k = 10 and compare to the above
k_10 <- knn(train = train[,-c(5)], test = test[,-c(5)], cl = especie, k=10)
mean(k_10==actual)
table(k_10, actual)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
new_data_train<-normalize(train[,-c(5)])
new_data_test<-normalize(test[,-c(5)])
k_norm <- knn(train = new_data_train, test = new_data_test, cl = especie)
table(k_norm, actual)
mean(k_norm==actual)
